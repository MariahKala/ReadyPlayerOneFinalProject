// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReadyPlayerOne.Models;

#nullable disable

namespace ReadyPlayerOne.Migrations
{
    [DbContext(typeof(PlayerContext))]
    partial class PlayerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ReadyPlayerOne.Models.Alignment", b =>
                {
                    b.Property<string>("AlignmentID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AlignmentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AlignmentID");

                    b.ToTable("Alignments");

                    b.HasData(
                        new
                        {
                            AlignmentID = "1",
                            AlignmentType = "Lawful Good"
                        },
                        new
                        {
                            AlignmentID = "2",
                            AlignmentType = "Neutral Good"
                        },
                        new
                        {
                            AlignmentID = "3",
                            AlignmentType = "Chaotic Good"
                        },
                        new
                        {
                            AlignmentID = "4",
                            AlignmentType = "Lawful Neutral"
                        },
                        new
                        {
                            AlignmentID = "5",
                            AlignmentType = "True Neutral"
                        },
                        new
                        {
                            AlignmentID = "6",
                            AlignmentType = "Chaotic Neutral"
                        },
                        new
                        {
                            AlignmentID = "7",
                            AlignmentType = "Lawful Evil"
                        },
                        new
                        {
                            AlignmentID = "8",
                            AlignmentType = "Neutral Evil"
                        },
                        new
                        {
                            AlignmentID = "9",
                            AlignmentType = "Chaotic Evil"
                        });
                });

            modelBuilder.Entity("ReadyPlayerOne.Models.Player", b =>
                {
                    b.Property<int>("PlayerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerID"));

                    b.Property<string>("AlignmentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Health")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Intelligence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Luck")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerImageID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stamina")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stealth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Strength")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlayerID");

                    b.HasIndex("AlignmentID");

                    b.HasIndex("PlayerImageID");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            PlayerID = 1,
                            AlignmentID = "3",
                            Class = "Mage",
                            Health = "3",
                            Intelligence = "9",
                            Luck = "3",
                            PlayerImageID = "3",
                            PlayerName = "Esther Ulrick",
                            Stamina = "3",
                            Stealth = "6",
                            Strength = "3"
                        },
                        new
                        {
                            PlayerID = 2,
                            AlignmentID = "3",
                            Class = "Warrior",
                            Health = "3",
                            Intelligence = "3",
                            Luck = "3",
                            PlayerImageID = "3",
                            PlayerName = "Rhiordan Tannick",
                            Stamina = "3",
                            Stealth = "3",
                            Strength = "3"
                        },
                        new
                        {
                            PlayerID = 3,
                            AlignmentID = "3",
                            Class = "Rogue",
                            Health = "3",
                            Intelligence = "3",
                            Luck = "3",
                            PlayerImageID = "3",
                            PlayerName = "Bevil Starling",
                            Stamina = "3",
                            Stealth = "3",
                            Strength = "3"
                        });
                });

            modelBuilder.Entity("ReadyPlayerOne.Models.PlayerImage", b =>
                {
                    b.Property<string>("PlayerImageID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlayerImageID");

                    b.ToTable("PlayerImages");

                    b.HasData(
                        new
                        {
                            PlayerImageID = "1",
                            Image = "BlondeElfMaleWarrior.jpg"
                        },
                        new
                        {
                            PlayerImageID = "2",
                            Image = "BlondeWarlock.jpg"
                        },
                        new
                        {
                            PlayerImageID = "3",
                            Image = "BlondeWitch.jpg"
                        },
                        new
                        {
                            PlayerImageID = "4",
                            Image = "DarkHairedPriestess.jpg"
                        },
                        new
                        {
                            PlayerImageID = "5",
                            Image = "ElfFemaleFighter.jpg"
                        },
                        new
                        {
                            PlayerImageID = "6",
                            Image = "FemaleSamuraiWarrior.jpg"
                        },
                        new
                        {
                            PlayerImageID = "7",
                            Image = "FemaleWarriorInSilverArmor.jpg"
                        },
                        new
                        {
                            PlayerImageID = "8",
                            Image = "FemaleWaterCreature.jpg"
                        },
                        new
                        {
                            PlayerImageID = "9",
                            Image = "GoldenArcher.jpg"
                        },
                        new
                        {
                            PlayerImageID = "10",
                            Image = "GreenFairy.jpg"
                        },
                        new
                        {
                            PlayerImageID = "11",
                            Image = "HumanBoyWithCloak.jpg"
                        },
                        new
                        {
                            PlayerImageID = "12",
                            Image = "HumanFemaleKnight.jpg"
                        },
                        new
                        {
                            PlayerImageID = "13",
                            Image = "HumanGirlWithCloak.jpg"
                        },
                        new
                        {
                            PlayerImageID = "14",
                            Image = "HumanMaleDruid.jpg"
                        },
                        new
                        {
                            PlayerImageID = "15",
                            Image = "MaleSeaCreature.jpg"
                        },
                        new
                        {
                            PlayerImageID = "16",
                            Image = "MaleWarriorInSilverArmor.jpg"
                        },
                        new
                        {
                            PlayerImageID = "17",
                            Image = "MaleWithFlowerCrown.jpg"
                        },
                        new
                        {
                            PlayerImageID = "18",
                            Image = "ManWithSkullArmor.jpg"
                        },
                        new
                        {
                            PlayerImageID = "19",
                            Image = "MermaidWithBlueHair.jpg"
                        },
                        new
                        {
                            PlayerImageID = "20",
                            Image = "OlderManHuman.jpg"
                        },
                        new
                        {
                            PlayerImageID = "21",
                            Image = "OlderManWarrior.jpg"
                        },
                        new
                        {
                            PlayerImageID = "22",
                            Image = "OldWomanMage.jpg"
                        },
                        new
                        {
                            PlayerImageID = "23",
                            Image = "OldWomanMage.jpg"
                        },
                        new
                        {
                            PlayerImageID = "24",
                            Image = "WomanWithWhiteHair.jpg"
                        },
                        new
                        {
                            PlayerImageID = "25",
                            Image = "YoungRogue.png"
                        });
                });

            modelBuilder.Entity("ReadyPlayerOne.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ReadyPlayerOne.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ReadyPlayerOne.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadyPlayerOne.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ReadyPlayerOne.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReadyPlayerOne.Models.Player", b =>
                {
                    b.HasOne("ReadyPlayerOne.Models.Alignment", "Alignment")
                        .WithMany()
                        .HasForeignKey("AlignmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadyPlayerOne.Models.PlayerImage", "PlayerImage")
                        .WithMany()
                        .HasForeignKey("PlayerImageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alignment");

                    b.Navigation("PlayerImage");
                });
#pragma warning restore 612, 618
        }
    }
}
